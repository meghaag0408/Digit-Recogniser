{
  "name": "Digit-recogniser",
  "tagline": "The aim is to code a complete handwritten digit recognizer and test it on the MNIST digit dataset.",
  "body": "#Digit Recogniser\r\n____________________________________________________________________________________________________________________________________________\r\n##Preamble\r\n____________________________________________________________________________________________________________________________________________\r\nThe aim of this assignment is to experiment with Multilayer Feedforward Neural Network (MLFNN) with Backpropagation (BP) learning we learned as part of Chapter 6 on real world problems. \r\n\r\n\r\n____________________________________________________________________________________________________________________________________________\r\n##Implementation - Question 1:\r\n-> Load the dataset into train images, train labels, test images, test labels.\r\n-> Divide the train images in a ratio of (1:5) i.e. 10000 for testing and remaining 50000 for training the network.\r\n-> Using 6 folds, train the network using mini_batches of train data and hence update biases and weights.\r\n-> The biases and weights so obtained are feed forwarded to verify the remaining data for testing, and hence the confusion matrix and rest parameters are printed.\r\n-> The plot of epochs vs error rate is plotted for each fold.\r\n-> The same process is repeated for 6 folds.\r\n-> The final biases and weights are recored, and average values of 6 folds are printed.\r\n\r\n-> The final biases and weights so obtained are used to test the trained network for the given test data.\r\n-> The accuracy and error value is noted.\r\n\r\n\r\n____________________________________________________________________________________________________________________________________________\r\n##Implementation - Question 2:\r\n->KNN is implemented for the given dataset.\r\n-> The outputs for k=1,3,5 are recorded.\r\n\r\n\r\n____________________________________________________________________________________________________________________________________________\r\n##Implementation - Question 3:\r\n-> Adding Noise - It is implemented by addding noise to the train data\r\n-> Weight Decay - It is implemented by changing the updatation of weight/biases function by adding a decay factor\r\n\r\n____________________________________________________________________________________________________________________________________________\r\n##Instructions to use the code:\r\n\r\n-> The code is run using python filename.py without giving any command line arguments.\r\n-> The mnist test data should be present in the same folder as of the code file.\r\n\r\n__________________________________________________________________________________________________________________________________________\r\n##Libraries/Packages Needed\r\nThese are all the packages that are required so as to the run the code:\r\n\t\r\n\t\timport numpy as np\r\n\t\timport operator\r\n\t\timport time\r\n\t\timport os\r\n\t\timport struct\r\n\t\tfrom array import array\r\n\t\timport math\r\n\t\timport sys\r\n\t\timport random\r\n\t\tfrom matplotlib.pyplot import *\r\n\t\timport csv\r\n\t\tfrom tabulate import tabulate\r\n\t\timport cPickle\r\n\t\timport gzip\r\n\r\n********************************************************************************************************************************************\r\n\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}